version: '3'

tasks:
  up:
    desc: Builds end to end an AKS environment
    cmds:
    - task: init
    - task: apply
    - task: creds
    - task: appinsights
    vars:
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  init: 
    desc: Initializes Terraform
    cmds:
    - terraform -chdir=./infrastructure workspace new {{.REGION}} || true
    - terraform -chdir=./infrastructure workspace select {{.REGION}}
    - terraform -chdir=./infrastructure init
    vars:
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  apply: 
    desc: Applies Terraform configuration
    cmds:
    - terraform -chdir=./infrastructure apply -auto-approve -var "region={{.REGION}}"
    vars:
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  plan:
    desc: Reviews Terraform plan
    cmds:
    - terraform -chdir=./infrastructure plan -var "region={{.REGION}}"
    vars:
      REGION: '{{default "southcentralus" .CLI_ARGS}}'
    
  creds:
    desc: Grab AKS credentials 
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - kubelogin convert-kubeconfig -l azurecli
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  appinsights:
    desc: Update Zipkin confiuration with proper AI Key
    cmds:
    - export AI_INSTRUMENTATION_KEY={{.AI_INSTRUMENTATION_KEY}} ;
      envsubst < clusters/common/istio/configuration/zipkin.tmpl > clusters/common/istio/configuration/zipkin.yaml
    - git add clusters/common/istio/configuration/zipkin.yaml
    - git commit -m "Updated AI_INSTRUMENTATION_KEY value"
    - git push
    vars:
      AI_INSTRUMENTATION_KEY: 
        sh: terraform -chdir=./infrastructure output -raw AI_INSTRUMENTATION_KEY

  pods: 
    desc: Shows all pods and services deployed in the cluster
    cmds:
    - kubectl -n istio-gateways get pods,services,deployments
    - kubectl -n aks-istio-ingress get pods,services,deployments
    - kubectl -n aks-istio-system get pods,services,deployments
    - kubectl -n knative-serving get pods,services,deployments
    - kubectl -n apps get pods,services,deployments
    - kubectl -n bookstore get pods,services,deployments
    - kubectl -n kube-system get pods,services,deployments
    - flux get all

  cluster:
    desc: Shows status of the AKS cluster
    cmds:
    - kubectl config use-context {{.AKS}}
    - az aks show -n {{.AKS}} -g {{.RG}} -o table
    - az aks nodepool list --cluster-name {{.AKS}} -g {{.RG}} -o table
    - kubectl get nodes -o wide -L kubernetes.azure.com/node-image-version
    - kubectl get --raw='/readyz?verbose'
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  down:
    desc: Destroys all Azure resources and cleans up terraform
    cmds:
    - cd infrastructure ;
      rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info
    - az group delete -n {{.RG}} --yes || true
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
